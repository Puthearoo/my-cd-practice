name: CI/CD Backend Deployment

on:
  push:
    branches: [test-workflow]

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify backend structure
        run: |
          echo "📁 Current repo structure:"
          ls -la
          echo "📁 Checking backend directory..."
          ls -la backend || echo "❌ No backend directory found!"

          if [ ! -f "backend/package.json" ]; then
            echo "❌ backend/package.json not found"
            exit 1
          fi
          if [ ! -f "backend/server.js" ]; then
            echo "❌ backend/server.js not found"
            exit 1
          fi
          echo "✅ Backend structure verified!"

      - name: Create backend deployment package
        run: |
          echo "📦 Creating backend deployment package..."
          cd backend

          # Make staging directory
          mkdir -p ../backend-deploy

          # Copy required files
          cp package.json ../backend-deploy/
          cp package-lock.json ../backend-deploy/ 2>/dev/null || echo "No package-lock.json found"
          cp server.js ../backend-deploy/

          # Copy optional project folders
          [ -d routes ] && cp -r routes ../backend-deploy/
          [ -d models ] && cp -r models ../backend-deploy/
          [ -d controllers ] && cp -r controllers ../backend-deploy/
          [ -d middleware ] && cp -r middleware ../backend-deploy/
          [ -d config ] && cp -r config ../backend-deploy/

          cd ../backend-deploy
          tar -czf ../backend.tar.gz .
          cd ..
          echo "✅ Backend package created:"
          ls -lh backend.tar.gz

      - name: Transfer backend package to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "backend.tar.gz"
          target: "/tmp/"

      - name: Deploy backend on server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e

            APP_DIR="/home/${{ secrets.SSH_USER }}/my-cd-practice/backend"
            BACKUP_DIR="/home/${{ secrets.SSH_USER }}/backups/backend_$(date +%Y%m%d_%H%M%S)"

            echo "🚀 Deploying backend to: $APP_DIR"

            # Backup existing version
            if [ -d "$APP_DIR" ] && [ "$(ls -A $APP_DIR)" ]; then
              echo "📦 Creating backup..."
              mkdir -p "$BACKUP_DIR"
              cp -r $APP_DIR/* "$BACKUP_DIR"/
              echo "✅ Backup created at $BACKUP_DIR"
            fi

            # Reset directory
            rm -rf $APP_DIR/*
            mkdir -p $APP_DIR

            # Extract new version
            echo "📤 Extracting backend..."
            tar -xzf /tmp/backend.tar.gz -C $APP_DIR/

            # Install Node.js if missing
            if ! command -v node &> /dev/null; then
              echo "❌ Node.js not found, installing..."
              sudo apt-get update
              sudo apt-get install -y curl
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            echo "✅ Node.js version: $(node -v)"

            # Install PM2 if missing
            if ! command -v pm2 &> /dev/null; then
              echo "❌ PM2 not found, installing..."
              sudo npm install -g pm2
            fi
            echo "✅ PM2 version: $(pm2 -v)"

            # Install dependencies
            cd $APP_DIR
            npm install --production

            # Create .env file
            cat > .env << EOF
            NODE_ENV=production
            PORT=3000
            EOF

            # Restart backend
            pm2 stop backend-api 2>/dev/null || true
            pm2 delete backend-api 2>/dev/null || true
            pm2 start server.js --name backend-api
            pm2 save

            # Cleanup
            rm -f /tmp/backend.tar.gz

            echo "✅ Backend deployed successfully!"
            echo "🌐 API running on: http://${{ secrets.SSH_HOST }}:3000"
